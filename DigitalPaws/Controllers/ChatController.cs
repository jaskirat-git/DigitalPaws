using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Http;
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading.Tasks;


namespace DigitalPaws.Controllers
{
	public class ChatController : Controller
	{
		private readonly HttpClient _httpClient;
		//private readonly string _apiKey = "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"; //my
		private readonly string _apiKey = "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"; // india

		public ChatController(IHttpClientFactory httpClientFactory)
		{
			_httpClient = httpClientFactory.CreateClient();
			_httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", _apiKey);
		}

		[HttpGet]
		public async Task<IActionResult> GetResponse(string query)
		{
			try
			{
				// Prepare the request body for the chat completions endpoint
				var requestBody = new
				{
					model = "gpt-3.5-turbo",
					messages = new[]
					 {
								new { role = "user", content = query }
						  },
					max_tokens = 150,
					temperature = 0.7
				};

				string jsonRequest = JsonConvert.SerializeObject(requestBody);
				var content = new StringContent(jsonRequest, Encoding.UTF8, "application/json");

				// Send the request to OpenAI Chat Completions endpoint
				var response = await _httpClient.PostAsync("https://api.openai.com/v1/chat/completions", content);

				if (!response.IsSuccessStatusCode)
				{
					string errorContent = await response.Content.ReadAsStringAsync();
					return Content($"Error: {response.StatusCode} - {errorContent}");
				}

				string jsonResponse = await response.Content.ReadAsStringAsync();
				var openAiResponse = JsonConvert.DeserializeObject<OpenAiChatResponse>(jsonResponse);

				if (openAiResponse?.Choices != null && openAiResponse.Choices.Count > 0)
				{
					string reply = openAiResponse.Choices[0].Message.Content?.Trim();
					return Content(reply);
				}
				else
				{
					return Content("No response generated by the API.");
				}
			}
			catch (Exception ex)
			{
				return Content($"Exception: {ex.Message}");
			}
		}

		// Models to deserialize the OpenAI chat response
		public class OpenAiChatResponse
		{
			[JsonProperty("choices")]
			public List<ChatChoice> Choices { get; set; }
		}

		public class ChatChoice
		{
			[JsonProperty("message")]
			public ChatMessage Message { get; set; }
		}

		public class ChatMessage
		{
			[JsonProperty("role")]
			public string Role { get; set; }

			[JsonProperty("content")]
			public string Content { get; set; }
		}
		public IActionResult Index()
		{
			return View();
		}
		public IActionResult ChatBox()
		{
			return View();
		}

	}
}
